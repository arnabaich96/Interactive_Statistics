---
title: "Interactive Statistical Concepts"
author: "Arnab Aich"
format: 
  html:
    embed-resources: true

output:
  html_document:
    self_contained: true
---

This document contains several interactive Shiny applications, each designed to help you understand a specific statistical concept. Use the tabs to switch between the applications.

```{r setup, include=FALSE ,echo=FALSE}
knitr::opts_chunk$set(echo = FALSE,input = FALSE,output = TRUE)
library(shiny)
library(plotly)
library(gtsummary)
library(gt)
library(shiny)
library(plotly)
library(gt)
library(tibble)
library(shinyjs)
library(shinyalert)
library(shinyWidgets)
```

##  {.tabset .tabset-fade}

### Preliminaries

In statistics, **sampling** is the process of selecting a subset of individuals from a **population** to estimate characteristics of the entire population. In this app, we are using a **simulated population** where the **heights** of individuals are [normally distributed]{.underline}. The accuracy of statistical estimates, such as the **sample mean** of heights, is influenced by the **sample size**. Larger samples tend to provide more reliable estimates because they better represent the population. However, even small samples can offer valuable insights, though they may exhibit greater variability. By adjusting the sample size in the app below, you can observe how the **sample mean** of heights fluctuates and compare it to the **true mean** height of the population.

```{r, echo=FALSE ,eval=TRUE,message=FALSE,warning=FALSE}
source("R/Preliminaries.R")
```

In the context of this app, **parameters** and **statistics** are key concepts. A **parameter** is a numerical value that describes a characteristic of the population. For example, the population mean height ($\mu$) is a parameter that represents the average height of all individuals in the population. Since we often do not have access to the entire population, we take a sample and calculate a **statistic**. A **statistic** is a numerical value calculated from the sample data, such as the sample mean height ($\bar{X}$). The sample mean is used as an estimate of the population mean. The difference between the parameter ($\mu$) and the statistic ($\bar{X}$) can vary depending on the sample size ($n$). By using this app, you can explore how closely the sample statistic approximates the population parameter as the sample size changes.

### Summary Statistics

File Upload: Users can upload a CSV file containing one row of values separated by commas. The app will read this file and use the data for analysis.
Manual Data Input: Users can still enter data manually in the text input field.
Random Data Generation: If neither a file is uploaded nor data is manually entered, the app will generate a random sample of size 500.
Summary Statistics:
The app calculates and displays the mean, median, standard deviation, IQR, and a user-defined quantile using gtsummary.
Interactive Visualizations:
Boxplot: An interactive boxplot using plotly.
Histogram with Density Curve: An interactive histogram with a density curve, with lines indicating the mean and median using plotly
```{r Summary Statistics}
source("R/Summary_Stat.R")
```

### Distributions

Key Features:
Distribution Selection: Users can select between Normal, Chi-squared, t, and F distributions.
Dynamic Inputs: Based on the selected distribution, the UI dynamically presents the appropriate input fields (mean, standard deviation, degrees of freedom, etc.).
Probability Calculation: The app calculates the probability based on the selected point and highlights the corresponding area under the curve.
Interactive Plots: The distribution curve is plotted using plotly, and the area under the curve is highlighted according to user input (left, right, or both sides).
Result Display: The calculated probability is displayed beneath the plot.
```{r Distributions}
source("R/Distributions.R")
```

### Inference

Here's how you can implement the Shiny app with the features you've described:

Key Features:
Checkbox for Known Standard Deviation: A checkbox to indicate if the standard deviation (SD) is known. If checked, the user can enter the SD value.
Confidence Interval Calculation: Automatically perform a Z-test if the SD is known, or a T-test if the SD is unknown, based on a user-specified confidence level.
Plotting and Table:
Generate a density plot with a shaded confidence interval and mark the midpoint.
Print the lower, midpoint, upper bounds, and the interval length.
Adjust plot and table titles according to the distribution used.
Hypothesis Testing: Optional hypothesis testing with user-specified mu_0, alpha level, and alternative hypothesis direction (equal, more, less).
Display the test statistic, p-value, critical region, and decision.
Highlight areas on the plot based on the alternative hypothesis.

```{r Inference}
source("R/Inference.R")
```


### Statistical Inference Shiny Application

This Shiny application allows you to perform chi-square tests on categorical data. You can input data in several ways:

- **Import File:** Upload a CSV or TXT file with categorical data.
- **Manual Entry:** Manually enter the data into a table.
- **Prebuilt Dataset:** Select from prebuilt datasets such as `HairEyeColor` or `UCBAdmissions`.

#### Steps to Use:
1. **Choose Data Input Type:** Select how you want to input the data (Import File, Manual Entry, Prebuilt Dataset).
2. **Input Data:**
   - If importing a file, click "Upload" to load your data.
   - For manual entry, fill in the table with your data.
   - For prebuilt datasets, simply choose one from the dropdown.
3. **View Results:** The app will automatically perform a chi-square test and display the expected values in a table, along with a plot of observed values.

#### Example Workflow:
1. Select "Prebuilt Dataset" and choose `HairEyeColor`.
2. The application will load the dataset, perform a chi-square test, and display the results.

This application is useful for quick analysis of categorical data, particularly for contingency table analysis.

```{r Chi-sq_Test}
source("R/Chi-sq_Test.R")
```


### Regression Analysis


```{r Regression Analysis}
source("R/Regression.R")
```

# ANOVA Analysis Shiny App

## Overview
This Shiny app allows users to perform ANOVA (Analysis of Variance) based on their input data. The app supports both One-Way and Two-Way ANOVA, depending on the structure of the dataset. Users can either upload their own data or use prebuilt datasets provided within R.

### Features
- **Flexible Data Input**: Users can upload CSV/TXT files or select from prebuilt datasets.
- **Automatic ANOVA Selection**: The app determines whether to perform One-Way or Two-Way ANOVA based on the number of columns in the dataset.
- **Comprehensive Output**:
  - **ANOVA Table**: Displays key statistics including degrees of freedom, sum of squares, mean squares, F-value, critical F-value, and p-value.
  - **Mean Effects**: Calculates and displays the mean effects for each factor in the dataset.

## User Interface

### 1. Sidebar Panel
- **Data Input Method**: Choose between file upload or prebuilt dataset.
- **File Upload**: Upload a CSV or TXT file.
- **Prebuilt Dataset**: Select from prebuilt datasets (`iris` for One-Way ANOVA, `ToothGrowth` for Two-Way ANOVA).
- **Run Analysis**: Click to perform the ANOVA after selecting input data.

### 2. Main Panel
- **Data Input Tab**:
  - Displays the uploaded or selected dataset in a tabular format.
- **ANOVA Results Tab**:
  - **ANOVA Table**: Shows the calculated ANOVA table in a visually appealing format.
  - **Mean Effects**: Provides mean effects for each factor in the analysis.

## Outputs and Interpretation

### 1. ANOVA Table

The ANOVA table is a fundamental output of the analysis and provides the following key information:

| Source | Degrees of Freedom (Df) | Sum of Squares (SS) | Mean Squares (MS) | F Value | Critical F Value | P Value |
|--------|--------------------------|---------------------|-------------------|---------|-------------------|---------|
| **Regression** | Df = k - 1 | Sum of squares due to the regression | MS = SS / Df | F statistic calculated as MS_regression / MS_error | Critical value from the F-distribution table | P-value calculated from the F-distribution |
| **Error** | Df = N - k | Sum of squares due to error (residual) | MS = SS / Df | | | |
| **Total** | Df = N - 1 | Total sum of squares | | | | |

#### Interpretation:
- **Degrees of Freedom (Df)**: Represents the number of independent values or quantities that can vary in the analysis.
- **Sum of Squares (SS)**: Indicates the total variation within the data. It's partitioned into variation due to regression and error.
- **Mean Squares (MS)**: Calculated by dividing the sum of squares by the corresponding degrees of freedom.
- **F Value**: The ratio of the mean square of the regression to the mean square of the error. A higher F value indicates that the model explains a significant amount of variance in the response variable.
- **Critical F Value**: The value from the F-distribution table corresponding to the significance level (e.g., Î± = 0.05). If the calculated F value exceeds this critical value, the null hypothesis is rejected.
- **P Value**: Represents the probability that the observed data could have occurred under the null hypothesis. A low p-value (typically < 0.05) indicates that the null hypothesis is unlikely, and we reject it in favor of the alternative hypothesis.

### 2. Mean Effects

The mean effects provide insight into the influence of different factors on the response variable.

#### For One-Way ANOVA:
- **Mean Effects by Factor**:
  - The average value of the response variable for each level of the factor. It gives an idea of how the factor levels compare to each other.

#### For Two-Way ANOVA:
- **Mean Effects by Factor 1 and Factor 2**:
  - The mean effect of each level of Factor 1 and Factor 2 on the response variable.
  - Interaction effects between the two factors can also be explored, revealing whether the impact of one factor depends on the level of the other factor.

### Visualization of Tables

To present the ANOVA table and mean effects in a more polished format, consider using the `kable` or `gt` packages in R for table rendering. These packages provide various styling options, including borders, bold headers, and formatted numbers, to enhance the readability and presentation of the results.

Example code snippet for generating a well-formatted table using `kable`:

```{r Anova_Table}
source("R/ANOVA.R")
```


